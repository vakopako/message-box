server {
  listen 80;
  server_name message-box.local;
  server_tokens off;

  location / {
    return 301 https://$host$request_uri;
  }
}

upstream mb_frontend {
  server frontend:3333;
}

upstream mb_backend {
  server backend:3222;
}

server {
  #listen 80 default_server;
  listen 443 ssl http2 default_server;

  # use docker's embedded DNS resolver and lower the timeout to 15 seconds
  # because upstream servers can change their IPs and we would have to reload nginx
  # @see https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
  # @see https://serverfault.com/questions/240476/how-to-force-nginx-to-resolve-dns-of-a-dynamic-hostname-everytime-when-doing-p#593003
  resolver 127.0.0.11 [::1]:5353 valid=15s;

  server_tokens off;

  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
  add_header X-Frame-Options "DENY";

  ssl_certificate /etc/nginx/ssl/localhost.crt;
  ssl_certificate_key /etc/nginx/ssl/localhost.key;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  server_name message-box.local;
  index index.php index.html index.htm;

  access_log /dev/stdout;
  error_log /dev/stderr notice;

  client_body_buffer_size 100M;
  client_max_body_size 100M;

  keepalive_timeout 10;

  proxy_next_upstream off;
  proxy_connect_timeout 6000;
  proxy_send_timeout 6000;
  proxy_read_timeout 6000;

  gzip on;
  gzip_vary on;
  gzip_types text/plain application/xml application/xhtml+xml text/javascript application/javascript application/x-javascript application/json text/json text/x-json text/css;

  # --------------------------------------------------------------------------
  # BACKEND
  # --------------------------------------------------------------------------

  location @proxy_backend {
    internal;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_pass http://mb_backend;
  }

  location ~ /api/ {
    try_files @proxy_backend @proxy_backend;
  }

  # --------------------------------------------------------------------------
  # FRONTEND
  # --------------------------------------------------------------------------

  location @proxy_frontend {
    internal;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_pass http://mb_frontend;
  }

  location ~ / {
    try_files @proxy_frontend @proxy_frontend;
  }
}

